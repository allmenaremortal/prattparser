using System;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Diagnostics;

using PrattParser;

namespace PrattParser.Test
{

    [TestClass]
    public class ParserTest
    {

        /// <summary>
        /// Assert that the hash value of the expression tree generated by the parser from inputString matches hashValue.
        /// </summary>
        /// <param name="inputString">The input string to be parsed.</param>
        /// <param name="hashValue">The expected hash value of the resulting expression tree.</param>
        private void assertParserResultWithHashValue(string inputString, int hashValue)
        {
            Lexer lexer = new Lexer(inputString);
            Grammar grammar = new Grammar();
            Parser parser = new Parser(lexer.GetEnumerator(), grammar);
            Expression expr = parser.parse();

            ExpressionHasher hasher = new ExpressionHasher();
            ExpressionPrinter printer = new ExpressionPrinter();

            Debug.Write(printer.visitExpression(expr));
            Debug.WriteLine("");

            Debug.Write(hasher.visitExpression(expr));
            Debug.WriteLine("");

            Assert.AreEqual(hashValue, hasher.visitExpression(expr));
        }

        /// <summary>
        /// Test of the parser through hash values of parsed expression trees.
        /// </summary>
        [TestMethod]
        public void hashExpressionParserTest()
        {
            assertParserResultWithHashValue("2+3*4", 50);
            assertParserResultWithHashValue("2*3+4", -27);
            assertParserResultWithHashValue("7-6-5", 20);
            assertParserResultWithHashValue("7-6-5-9", 52);
            assertParserResultWithHashValue("10+5+2", 25);


        }
    }
}
